<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ActivityMeta extends \App\Entity\ActivityMeta implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'activity', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'id', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'name', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'value', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'type', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'required', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'constraints'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'activity', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'id', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'name', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'value', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'type', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'required', '' . "\0" . 'App\\Entity\\ActivityMeta' . "\0" . 'constraints'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ActivityMeta $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setEntity(\App\Entity\EntityWithMetaFields $entity): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntity', [$entity]);

        return parent::setEntity($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntity(): ?\App\Entity\EntityWithMetaFields
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntity', []);

        return parent::getEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', []);

        return parent::getValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($value): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$value]);

        return parent::setValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setConstraints(array $constraints): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConstraints', [$constraints]);

        return parent::setConstraints($constraints);
    }

    /**
     * {@inheritDoc}
     */
    public function getType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(string $type): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function addConstraint(\Symfony\Component\Validator\Constraint $constraint): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addConstraint', [$constraint]);

        return parent::addConstraint($constraint);
    }

    /**
     * {@inheritDoc}
     */
    public function getConstraints(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConstraints', []);

        return parent::getConstraints();
    }

    /**
     * {@inheritDoc}
     */
    public function isRequired(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRequired', []);

        return parent::isRequired();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsRequired(bool $isRequired): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsRequired', [$isRequired]);

        return parent::setIsRequired($isRequired);
    }

    /**
     * {@inheritDoc}
     */
    public function isVisible(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVisible', []);

        return parent::isVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsVisible(bool $visible): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsVisible', [$visible]);

        return parent::setIsVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function merge(\App\Entity\MetaTableTypeInterface $meta): \App\Entity\MetaTableTypeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'merge', [$meta]);

        return parent::merge($meta);
    }

}
